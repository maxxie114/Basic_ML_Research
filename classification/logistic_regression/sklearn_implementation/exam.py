import numpy as np

hours_studied = np.array([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]).reshape(20,1)

passed_exam = np.array([0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1])

passed_exam_2 = np.array([0,0,1,0,0,0,1,1,0,1,0,0,1,1,1,1,1,1,1,1])

passed_exam_2_train = np.array([0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1])

passed_exam_2_test = np.array([1, 1, 0, 1, 1])

math_courses_taken = np.array([0,1,4,0,3,1,2,3,0,2,0,1,2,3,4,2,1,3,1,0]).reshape(20,1)

hours_studied_scaled = np.array([[-1.64750894],[-1.47408695],[-1.30066495],[-1.12724296],[-0.95382097],\
       [-0.78039897],[-0.60697698],[-0.43355498],[-0.26013299],[-0.086711  ],\
       [ 0.086711  ],[ 0.26013299],[ 0.43355498],[ 0.60697698],[ 0.78039897],\
       [ 0.95382097],[ 1.12724296],[ 1.30066495],[ 1.47408695], [ 1.64750894]])

exam_features_scaled = np.array([[-1.64750894, -1.25537916],[-1.47408695, -0.49454331],[-1.30066495,1.78796426],\
                [-1.12724296, -1.25537916],[-0.95382097, 1.02712841],[-0.78039897, -0.49454331],\
                [-0.60697698,  0.26629255],[-0.43355498, 1.02712841],[-0.26013299, -1.25537916],\
                [-0.086711, 0.26629255], [0.086711, -1.25537916], [0.26013299, -0.49454331],\
                [0.43355498, 0.26629255],[0.60697698,  1.02712841],[ 0.78039897, 1.78796426],\
                [ 0.95382097, 0.26629255],[1.12724296, -0.49454331],[ 1.30066495, 1.02712841],\
                [ 1.47408695, -0.49454331],[1.64750894, -1.25537916]])

exam_features_scaled_train = np.array([[-0.26013299, -1.25537916], [ 0.26013299, -0.49454331], [ 1.64750894, -1.25537916],\
       [-1.12724296, -1.25537916], [-0.43355498,  1.02712841], [-0.60697698,  0.26629255],\
       [ 0.60697698,  1.02712841], [-0.78039897, -0.49454331], [ 0.086711  , -1.25537916],\
       [ 0.43355498,  0.26629255], [ 0.95382097,  0.26629255], [-1.47408695, -0.49454331],\
       [-1.64750894, -1.25537916], [ 1.30066495,  1.02712841], [-0.086711  ,  0.26629255]])

exam_features_scaled_test = np.array([[ 1.12724296, -0.49454331],[ 0.78039897,  1.78796426],[-0.95382097,  1.02712841],\
       [-1.30066495,  1.78796426],[ 1.47408695, -0.49454331]])

guessed_hours = np.array([2,2,4,5,5,5,6,8,8,9,10,10,11,13,13,15,18,19,1922]).reshape(-1,1)

guessed_hours_scaled = np.array([[-1.30066495e+00],[-1.30066495e+00],[-9.53820966e-01],\
                                 [-7.80398973e-01],[-7.80398973e-01],[-7.80398973e-01],\
                                 [-6.06976979e-01],[-2.60132991e-01],[-2.60132991e-01],\
                                 [-8.67109970e-02],[ 8.67109970e-02],[ 8.67109970e-02],\
                                 [ 2.60132991e-01],[ 6.06976979e-01],[ 6.06976979e-01],\
                                 [ 9.53820966e-01],[ 1.47408695e+00],[ 1.64750894e+00],[ 3.31669563e+02]])

calculated_coefficients = np.array([[0.20678491]])
zero_coefficients = np.array([0])

intercept = np.array([-1.76125712])
zero_intercept = np.array([0])

def log_odds(features, coefficients,intercept):
  return np.dot(features,coefficients) + intercept

calculated_log_odds = log_odds(hours_studied,calculated_coefficients,intercept)
calculated_log_odds_2 = log_odds(hours_studied,zero_coefficients,zero_intercept)

def sigmoid(z):
  denominator = 1 + np.exp(-z)
  return 1/denominator

probabilities = sigmoid(calculated_log_odds)
probabilities_2 = sigmoid(calculated_log_odds_2)

def log_loss(probabilities,actual_class):
  return np.sum(-(1/actual_class.shape[0])*(actual_class*np.log(probabilities) + (1-actual_class)*np.log(1-probabilities)))
